import pygame,sys
import model
import road

traffic_lights_timer = 57
main_roads = [road.main_road1, road.main_road2, road.main_road3, road.main_road4, road.main_road5, road.main_road6]

class drawing(object):
    def __init__(self):
        # initialization
        clock = pygame.time.Clock()
        FPS = 15
        self.width = 674
        self.height = 783
        self.cords=[]
        self.mapList=[]
        self.lista=[11]
        self.screen = pygame.display.set_mode((self.width, self.height))
        self.pic = 2
        self.pic_name = "road/2.jpg"
        
        def numbers_to_pic_name(argument): 
            switcher = { 
                1: "road/1.jpg", 
                2: "road/2.jpg", 
                3: "road/3.jpg", 
                4: "road/4.jpg", 
                5: "road/5.jpg", 
                6: "road/6.jpg", 
                7: "road/7.jpg", 
                8: "road/8.jpg", 
                9: "road/9.jpg", 
                10: "road/10.jpg", 
                11: "road/11.jpg", 
                12: "road/12.jpg", 
                13: "road/13.jpg", 
                14: "road/14.jpg", 
            } 
            return switcher.get(argument, "road/2.jpg") #domyslny
        
        while True:
            # Handle events
            for event in pygame.event.get():
                if (event.type == pygame.QUIT):
                    sys.exit(0)
                if event.type == pygame.KEYDOWN:
                    if (event.key == pygame.K_ESCAPE):
                        sys.exit(0)
                    elif (event.key == pygame.K_RIGHT): #zmiana obrazka zgodnie z ruchem wskazowek
                        self.pic +=1
                        if(self.pic == 15):
                            self.pic = 1
                        self.pic_name=numbers_to_pic_name(self.pic)
                    elif (event.key == pygame.K_LEFT): #zmiana obrazka przeciwnie do ruchu wskazowek
                        self.pic -=1
                        if(self.pic == 0):
                            self.pic = 14
                        self.pic_name=numbers_to_pic_name(self.pic)
                    elif (event.key == pygame.K_F11):
                        self.screen = pygame.display.set_mode((self.width, self.height))
                    elif (event.key == pygame.K_F10):
                        print(self.cords)
                    elif (event.key == pygame.K_SPACE):
                        self.cords.pop()
                    elif (event.key == pygame.K_F9):
                        self.makeList(self.lista)
                if (event.type == pygame.MOUSEBUTTONDOWN):
                    # print event.button
                    w=pygame.mouse.get_pos()
                    print(w)
                    self.cords.append(w)
                    pygame.display.update()

            model.simulation() #symulacja kolejnego kroku
            
            bypassImage=pygame.image.load(self.pic_name)
            self.screen.blit(bypassImage,(0,0))
            
            if(self.pic==1):
                self.draw_main_road1_pic1()
                self.draw_main_road2_pic1()
                self.draw_main_road3_pic1()
                self.draw_main_road4_pic1()
                self.draw_main_road5_pic1()
                self.draw_main_road6_pic1()
            elif(self.pic==2):
                self.draw_main_road1_pic2()
                self.draw_main_road2_pic2()
                self.draw_main_road3_pic2()
                self.draw_main_road4_pic2()
                self.draw_main_road5_pic2()
                self.draw_main_road6_pic2()
                self.draw_r1_pic2()
                self.draw_r2_pic2()
                self.draw_r3_pic2()
                self.draw_r4_pic2()
                self.draw_r5_pic2()
                self.draw_r6_pic2()
                self.draw_r7_pic2()
                self.draw_r8_pic2()
                self.draw_r9_pic2()
                self.draw_r10_pic2()
                self.draw_r11_pic2()
                self.draw_r12_pic2()
                self.draw_r13_pic2()
                self.draw_r14_pic2()
                self.draw_r15_pic2()
            
            
            for i in range(len(self.cords)): # do usunienia po wizulaizacji
                (x,y)=self.cords[i]
                pygame.draw.rect(self.screen, (0,0,0), pygame.Rect(x, y, 2, 2))

                   
            pygame.display.update()
            clock.tick(FPS)
   
    
    def makeList(self,listofnumbers): # do usunienia po wizulaizacji
        self.mapList.clear()
        self.mapList.append(self.cords[0])
        dx=0
        dy=0
        for i in range(0,len(self.cords)):
            if(i>0):
                (x1,y1)=self.cords[i]
                (x2,y2)=self.cords[i-1]
                x=x1-x2
                y=y1-y2
                dx=x/listofnumbers[i-1]
                dy=y/listofnumbers[i-1]
                print(listofnumbers[i-1])
                for k in range(listofnumbers[i-1]):
                    x2 = x2 + dx
                    y2 = y2 + dy
                    w = (x2, y2)
                    self.mapList.append(w)
                    
            if(i>0):
                for i in range(len(self.mapList)):
                    (x,y)=self.mapList[i]
                    pygame.draw.rect(self.screen, (133, 230, 90), pygame.Rect(x, y, 2, 2))         
                    
        print(self.mapList)
        print(len(self.mapList))
            
        pygame.display.update()

    def draw_main_road1_pic1(self):
        main_road1=[(473, 69), (478.25, 64.75), (483.5, 60.5), (488.75, 56.25), (494.0, 52.0), (499.25, 47.75),
                   (504.5, 43.5), (509.75, 39.25), (515.0, 35.0), (520.25, 30.75), (525.5, 26.5), (530.75, 22.25),
                   (536.0, 18.0), (541.25, 13.75), (546.5, 9.5), (551.75, 5.25), (557.0, 1.0)]
        for d in range(17): #len(road.main_road4.lane)
            if (road.main_road1.lane[d].vehicle == 1):
                (x, y) = main_road1[d]
                pygame.draw.rect(self.screen, (255, 255, 255), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
    
    def draw_main_road2_pic1(self):
        main_road2 = [(478, 72), (483.3125, 67.6875), (488.625, 63.375), (493.9375, 59.0625), (499.25, 54.75),
                   (504.5625, 50.4375), (509.875, 46.125), (515.1875, 41.8125), (520.5, 37.5), (525.8125, 33.1875),
                   (531.125, 28.875), (536.4375, 24.5625), (541.75, 20.25), (547.0625, 15.9375), (552.375, 11.625),
                   (557.6875, 7.3125), (563.0, 3.0)]
        for d in range(17): #len(road.main_road4.lane)
            if (road.main_road2.lane[d].vehicle == 1):
                (x, y) = main_road2[d]
                pygame.draw.rect(self.screen, (255, 255, 255), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
    
    def draw_main_road3_pic1(self):
        main_road3=[(483, 78), (488.4375, 73.375), (493.875, 68.75), (499.3125, 64.125), (504.75, 59.5),
                   (510.1875, 54.875), (515.625, 50.25), (521.0625, 45.625), (526.5, 41.0), (531.9375, 36.375),
                   (537.375, 31.75), (542.8125, 27.125), (548.25, 22.5), (553.6875, 17.875), (559.125, 13.25),
                   (564.5625, 8.625), (570.0, 4.0)]
        for d in range(17): #len(road.main_road4.lane)
            if (road.main_road3.lane[d].vehicle == 1):
                (x, y) = main_road3[d]
                pygame.draw.rect(self.screen, (255, 255, 255), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
    
    def draw_main_road4_pic1(self):
        main_road4=[(450, 50), (443.3333333333333, 55.0), (436.66666666666663, 60.0), (429.99999999999994, 65.0),
         (423.33333333333326, 70.0), (416.6666666666666, 75.0), (409.9999999999999, 80.0), (400.0, 88.0),
         (396.0, 93.0), (391.375, 97.375), (386.75, 101.75), (382.125, 106.125), (377.5, 110.5),
         (372.875, 114.875), (368.25, 119.25), (363.625, 123.625), (359.0, 128.0), (354.375, 132.375),
         (349.75, 136.75), (345.125, 141.125), (340.5, 145.5), (335.875, 149.875), (331.25, 154.25),
         (326.625, 158.625), (322.0, 163.0), (319.0, 167.0), (315.0, 173.0),
         (311.94117647058823, 179.47058823529412), (308.88235294117646, 185.94117647058823),
         (305.8235294117647, 192.41176470588235), (302.7647058823529, 198.88235294117646),
         (299.70588235294116, 205.35294117647058), (296.6470588235294, 211.8235294117647),
         (293.5882352941176, 218.2941176470588), (290.52941176470586, 224.76470588235293),
         (287.4705882352941, 231.23529411764704), (284.4117647058823, 237.70588235294116),
         (281.35294117647055, 244.17647058823528), (278.2941176470588, 250.6470588235294),
         (275.235294117647, 257.11764705882354), (272.17647058823525, 263.5882352941177),
         (269.1176470588235, 270.0588235294118), (266.0588235294117, 276.52941176470597),
         (262.99999999999994, 283.0000000000001), (260.0, 290.0), (255.0, 302.0), (252.5625, 307.4375),
         (250.125, 312.875), (247.6875, 318.3125), (245.25, 323.75), (242.8125, 329.1875), (240.375, 334.625),
         (237.9375, 340.0625), (235.5, 345.5), (233.0625, 350.9375), (230.625, 356.375), (228.1875, 361.8125),
         (225.75, 367.25), (223.3125, 372.6875), (220.875, 378.125), (218.4375, 383.5625), (216.0, 389.0),
         (213.9375, 393.6875), (211.875, 398.375), (209.8125, 403.0625), (207.75, 407.75),
         (205.6875, 412.4375), (203.625, 417.125), (201.5625, 421.8125), (199.5, 426.5), (197.4375, 431.1875),
         (195.375, 435.875), (193.3125, 440.5625), (191.25, 445.25), (189.1875, 449.9375), (187.125, 454.625),
         (185.0625, 459.3125), (183.0, 464.0), (180.23529411764707, 472.47058823529414),
         (177.47058823529414, 480.9411764705883), (174.70588235294122, 489.41176470588243),
         (171.9411764705883, 497.8823529411766), (169.17647058823536, 506.3529411764707),
         (166.41176470588243, 514.8235294117649), (163.6470588235295, 523.294117647059),
         (160.88235294117658, 531.7647058823532), (158.11764705882365, 540.2352941176473),
         (155.35294117647072, 548.7058823529414), (152.5882352941178, 557.1764705882356),
         (149.82352941176487, 565.6470588235297), (147.05882352941194, 574.1176470588239),
         (144.294117647059, 582.588235294118), (141.52941176470608, 591.0588235294122),
         (138.76470588235316, 599.5294117647063), (136.00000000000023, 608.0000000000005), (134.0, 614.0),
         (130.0, 621.0), (126.0, 632.0), (126.0, 641.0), (126.0, 646.0), (124.14285714285714, 655.5),
         (122.28571428571428, 665.0), (120.42857142857142, 674.5), (118.57142857142856, 684.0),
         (116.7142857142857, 693.5), (114.85714285714283, 703.0), (112.99999999999997, 712.5),
         (111.14285714285711, 722.0), (109.28571428571425, 731.5), (107.42857142857139, 741.0),
         (105.57142857142853, 750.5), (103.71428571428567, 760.0), (101.8571428571428, 769.5),
         (99.99999999999994, 779.0)]
        for d in range(114): #len(road.main_road4.lane)
            if (road.main_road4.lane[d].vehicle == 1):
                (x, y) = main_road4[d]
                pygame.draw.rect(self.screen, (255, 255, 255), pygame.Rect(x, y, 2, 2))
                pygame.display.update()

    def draw_main_road5_pic1(self):
        main_road5=[(453, 51), (446.5, 56.333333333333336), (440.0, 61.66666666666667), (433.5, 67.0),
         (427.0, 72.33333333333333), (420.5, 77.66666666666666), (414.0, 82.99999999999999), (405.0, 90.0),
         (401.0, 96.0), (396.25, 100.3125), (391.5, 104.625), (386.75, 108.9375), (382.0, 113.25),
         (377.25, 117.5625), (372.5, 121.875), (367.75, 126.1875), (363.0, 130.5), (358.25, 134.8125),
         (353.5, 139.125), (348.75, 143.4375), (344.0, 147.75), (339.25, 152.0625), (334.5, 156.375),
         (329.75, 160.6875), (325.0, 165.0), (322.0, 169.0), (319.0, 174.0),
         (315.94117647058823, 180.7058823529412), (312.88235294117646, 187.41176470588238),
         (309.8235294117647, 194.11764705882356), (306.7647058823529, 200.82352941176475),
         (303.70588235294116, 207.52941176470594), (300.6470588235294, 214.23529411764713),
         (297.5882352941176, 220.94117647058832), (294.52941176470586, 227.6470588235295),
         (291.4705882352941, 234.3529411764707), (288.4117647058823, 241.05882352941188),
         (285.35294117647055, 247.76470588235307), (282.2941176470588, 254.47058823529426),
         (279.235294117647, 261.1764705882354), (276.17647058823525, 267.8823529411766),
         (273.1176470588235, 274.58823529411774), (270.0588235294117, 281.2941176470589),
         (266.99999999999994, 288.00000000000006), (263.0, 295.0), (259.0, 305.0), (256.625, 310.3125),
         (254.25, 315.625), (251.875, 320.9375), (249.5, 326.25), (247.125, 331.5625), (244.75, 336.875),
         (242.375, 342.1875), (240.0, 347.5), (237.625, 352.8125), (235.25, 358.125), (232.875, 363.4375),
         (230.5, 368.75), (228.125, 374.0625), (225.75, 379.375), (223.375, 384.6875), (221.0, 390.0),
         (218.75, 395.0625), (216.5, 400.125), (214.25, 405.1875), (212.0, 410.25), (209.75, 415.3125),
         (207.5, 420.375), (205.25, 425.4375), (203.0, 430.5), (200.75, 435.5625), (198.5, 440.625),
         (196.25, 445.6875), (194.0, 450.75), (191.75, 455.8125), (189.5, 460.875), (187.25, 465.9375),
         (185.0, 471.0), (182.35294117647058, 479.1764705882353), (179.70588235294116, 487.3529411764706),
         (177.05882352941174, 495.5294117647059), (174.41176470588232, 503.7058823529412),
         (171.7647058823529, 511.8823529411765), (169.11764705882348, 520.0588235294118),
         (166.47058823529406, 528.2352941176471), (163.82352941176464, 536.4117647058823),
         (161.17647058823522, 544.5882352941176), (158.5294117647058, 552.7647058823528),
         (155.88235294117638, 560.9411764705881), (153.23529411764696, 569.1176470588233),
         (150.58823529411754, 577.2941176470586), (147.94117647058812, 585.4705882352938),
         (145.2941176470587, 593.647058823529), (142.64705882352928, 601.8235294117643),
         (139.99999999999986, 609.9999999999995), (137.0, 616.0), (136.0, 624.0), (132.0, 632.0),
         (131.0, 640.0), (131.0, 649.0), (129.21428571428572, 658.2857142857143),
         (127.42857142857143, 667.5714285714287), (125.64285714285714, 676.857142857143),
         (123.85714285714285, 686.1428571428573), (122.07142857142856, 695.4285714285717),
         (120.28571428571426, 704.714285714286), (118.49999999999997, 714.0000000000003),
         (116.71428571428568, 723.2857142857147), (114.92857142857139, 732.571428571429),
         (113.1428571428571, 741.8571428571433), (111.3571428571428, 751.1428571428577),
         (109.57142857142851, 760.428571428572), (107.78571428571422, 769.7142857142863),
         (105.99999999999993, 779.0000000000007)]
        for d in range(114): #len(road.main_road4.lane)
            if (road.main_road5.lane[d].vehicle == 1):
                (x, y) = main_road5[d]
                pygame.draw.rect(self.screen, (255, 255, 255), pygame.Rect(x, y, 2, 2))
                pygame.display.update()

    def draw_main_road6_pic1(self):
        main_road6=[(458, 55), (451.6666666666667, 60.0), (445.33333333333337, 65.0), (439.00000000000006, 70.0),
         (432.66666666666674, 75.0), (426.3333333333334, 80.0), (420.0000000000001, 85.0), (414.0, 92.0),
         (409.0, 96.0), (404.0625, 100.625), (399.125, 105.25), (394.1875, 109.875), (389.25, 114.5),
         (384.3125, 119.125), (379.375, 123.75), (374.4375, 128.375), (369.5, 133.0), (364.5625, 137.625),
         (359.625, 142.25), (354.6875, 146.875), (349.75, 151.5), (344.8125, 156.125), (339.875, 160.75),
         (334.9375, 165.375), (330.0, 170.0), (327.0, 175.0), (325.0, 179.0),
         (321.94117647058823, 185.64705882352942), (318.88235294117646, 192.29411764705884),
         (315.8235294117647, 198.94117647058826), (312.7647058823529, 205.58823529411768),
         (309.70588235294116, 212.2352941176471), (306.6470588235294, 218.88235294117652),
         (303.5882352941176, 225.52941176470594), (300.52941176470586, 232.17647058823536),
         (297.4705882352941, 238.82352941176478), (294.4117647058823, 245.4705882352942),
         (291.35294117647055, 252.11764705882362), (288.2941176470588, 258.76470588235304),
         (285.235294117647, 265.41176470588243), (282.17647058823525, 272.0588235294118),
         (279.1176470588235, 278.7058823529412), (276.0588235294117, 285.3529411764706),
         (272.99999999999994, 292.0), (267.0, 300.0), (263.0, 308.0), (260.9375, 312.6875),
         (258.875, 317.375), (256.8125, 322.0625), (254.75, 326.75), (252.6875, 331.4375), (250.625, 336.125),
         (248.5625, 340.8125), (246.5, 345.5), (244.4375, 350.1875), (242.375, 354.875), (240.3125, 359.5625),
         (238.25, 364.25), (236.1875, 368.9375), (234.125, 373.625), (232.0625, 378.3125), (230.0, 383.0),
         (227.6875, 388.1875), (225.375, 393.375), (223.0625, 398.5625), (220.75, 403.75),
         (218.4375, 408.9375), (216.125, 414.125), (213.8125, 419.3125), (211.5, 424.5), (209.1875, 429.6875),
         (206.875, 434.875), (204.5625, 440.0625), (202.25, 445.25), (199.9375, 450.4375), (197.625, 455.625),
         (195.3125, 460.8125), (193.0, 466.0), (190.47058823529412, 474.2352941176471),
         (187.94117647058823, 482.47058823529414), (185.41176470588235, 490.7058823529412),
         (182.88235294117646, 498.9411764705883), (180.35294117647058, 507.17647058823536),
         (177.8235294117647, 515.4117647058824), (175.2941176470588, 523.6470588235295),
         (172.76470588235293, 531.8823529411766), (170.23529411764704, 540.1176470588236),
         (167.70588235294116, 548.3529411764707), (165.17647058823528, 556.5882352941178),
         (162.6470588235294, 564.8235294117649), (160.1176470588235, 573.0588235294119),
         (157.58823529411762, 581.294117647059), (155.05882352941174, 589.5294117647061),
         (152.52941176470586, 597.7647058823532), (149.99999999999997, 606.0000000000002), (143.0, 613.0),
         (140.0, 625.0), (136.0, 640.0), (137.0, 648.0), (135.0, 659.0),
         (133.35714285714286, 667.5714285714286), (131.71428571428572, 676.1428571428571),
         (130.07142857142858, 684.7142857142857), (128.42857142857144, 693.2857142857142),
         (126.7857142857143, 701.8571428571428), (125.14285714285717, 710.4285714285713),
         (123.50000000000003, 718.9999999999999), (121.85714285714289, 727.5714285714284),
         (120.21428571428575, 736.142857142857), (118.57142857142861, 744.7142857142856),
         (116.92857142857147, 753.2857142857141), (115.28571428571433, 761.8571428571427),
         (113.6428571428572, 770.4285714285712), (112.00000000000006, 778.9999999999998)]
        for d in range(114): #len(road.main_road4.lane)
            if (road.main_road5.lane[d].vehicle == 1):
                (x, y) = main_road6[d]
                pygame.draw.rect(self.screen, (255, 255, 255), pygame.Rect(x, y, 2, 2))
                pygame.display.update()


    def draw_main_road1_pic2(self):
        main_road1=[(1, 413), (7.2, 408.0), (13.4, 403.0), (19.6, 398.0), (25.8, 393.0), (32.0, 388.0), (38.2, 383.0), (44.400000000000006, 378.0), (50.60000000000001, 373.0), (56.80000000000001, 368.0), (63.000000000000014, 363.0), (68.0, 359.5), (73.0, 356.0), (78.6875, 352.1875), (84.375, 348.375), (90.0625, 344.5625), (95.75, 340.75), (101.4375, 336.9375), (107.125, 333.125), (112.8125, 329.3125), (118.5, 325.5), (124.1875, 321.6875), (129.875, 317.875), (135.5625, 314.0625), (141.25, 310.25), (146.9375, 306.4375), (152.625, 302.625), (158.3125, 298.8125), (164.0, 295.0), (169.25, 293.0), (174.5, 291.0), (179.75, 289.0), (185.0, 287.0), (190.25, 285.0), (195.5, 283.0), (200.75, 281.0), (206.0, 279.0), (211.25, 277.0), (216.5, 275.0), (221.75, 273.0), (227.0, 271.0), (232.25, 269.0), (237.5, 267.0), (242.75, 265.0), (248.0, 263.0), (254.5, 261.0), (261.0, 259.0), (267.0, 258.1666666666667), (273.0, 257.33333333333337), (279.0, 256.50000000000006), (285.0, 255.6666666666667), (291.0, 254.83333333333337), (297.0, 254.00000000000003), (303.0, 253.16666666666669), (309.0, 252.33333333333334), (315.0, 251.5), (321.0, 250.66666666666666), (327.0, 249.83333333333331), (333.0, 248.99999999999997), (337.0, 248.5), (341.0, 248.0), (345.0, 247.5), (349.0, 247.0), (354.12, 246.52), (359.24, 246.04000000000002), (364.36, 245.56000000000003), (369.48, 245.08000000000004), (374.6, 244.60000000000005), (379.72, 244.12000000000006), (384.84000000000003, 243.64000000000007), (389.96000000000004, 243.16000000000008), (395.08000000000004, 242.6800000000001), (400.20000000000005, 242.2000000000001), (405.32000000000005, 241.7200000000001), (410.44000000000005, 241.24000000000012), (415.56000000000006, 240.76000000000013), (420.68000000000006, 240.28000000000014), (425.80000000000007, 239.80000000000015), (430.9200000000001, 239.32000000000016), (436.0400000000001, 238.84000000000017), (441.1600000000001, 238.36000000000018), (446.2800000000001, 237.8800000000002), (451.4000000000001, 237.4000000000002), (456.5200000000001, 236.92000000000021), (461.6400000000001, 236.44000000000023), (466.7600000000001, 235.96000000000024), (471.8800000000001, 235.48000000000025), (477.0000000000001, 235.00000000000026), (484.0, 237.0), (491.0, 239.0), (498.0, 241.0), (503.7, 242.33333333333334), (509.4, 243.66666666666669), (515.1, 245.00000000000003), (520.8000000000001, 246.33333333333337), (526.5000000000001, 247.6666666666667), (532.2000000000002, 249.00000000000006), (537.9000000000002, 250.3333333333334), (543.6000000000003, 251.66666666666674), (549.3000000000003, 253.00000000000009), (555.0000000000003, 254.33333333333343), (560.7000000000004, 255.66666666666677), (566.4000000000004, 257.0000000000001), (572.1000000000005, 258.3333333333334), (577.8000000000005, 259.66666666666674), (583.5000000000006, 261.00000000000006), (589.2000000000006, 262.33333333333337), (594.9000000000007, 263.6666666666667), (600.6000000000007, 265.0), (606.3000000000008, 266.3333333333333), (612.0000000000008, 267.66666666666663), (617.7000000000008, 268.99999999999994), (623.4000000000009, 270.33333333333326), (629.1000000000009, 271.6666666666666), (634.800000000001, 272.9999999999999), (640.500000000001, 274.3333333333332), (646.2000000000011, 275.6666666666665), (651.9000000000011, 276.99999999999983), (657.6000000000012, 278.33333333333314), (663.3000000000012, 279.66666666666646), (669.0000000000013, 280.9999999999998)]
        for d in range(14,135):
            if (road.main_road1.lane[d].vehicle == 1):
                (x, y) = main_road1[d-14]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.main_road1.lane[d].vehicle == 2):
                (x, y) = main_road1[d-14]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
    
    def draw_main_road2_pic2(self):
        main_road2=[(3, 417), (9.3, 411.9), (15.600000000000001, 406.79999999999995), (21.900000000000002, 401.69999999999993), (28.200000000000003, 396.5999999999999), (34.5, 391.4999999999999), (40.8, 386.39999999999986), (47.099999999999994, 381.29999999999984), (53.39999999999999, 376.1999999999998), (59.69999999999999, 371.0999999999998), (65.99999999999999, 365.9999999999998), (71.0, 363.0), (76.0, 360.0), (81.6875, 356.25), (87.375, 352.5), (93.0625, 348.75), (98.75, 345.0), (104.4375, 341.25), (110.125, 337.5), (115.8125, 333.75), (121.5, 330.0), (127.1875, 326.25), (132.875, 322.5), (138.5625, 318.75), (144.25, 315.0), (149.9375, 311.25), (155.625, 307.5), (161.3125, 303.75), (167.0, 300.0), (172.1875, 298.0), (177.375, 296.0), (182.5625, 294.0), (187.75, 292.0), (192.9375, 290.0), (198.125, 288.0), (203.3125, 286.0), (208.5, 284.0), (213.6875, 282.0), (218.875, 280.0), (224.0625, 278.0), (229.25, 276.0), (234.4375, 274.0), (239.625, 272.0), (244.8125, 270.0), (250.0, 268.0), (256.0, 265.5), (262.0, 263.0), (268.0, 262.1666666666667), (274.0, 261.33333333333337), (280.0, 260.50000000000006), (286.0, 259.66666666666674), (292.0, 258.8333333333334), (298.0, 258.0000000000001), (304.0, 257.1666666666668), (310.0, 256.3333333333335), (316.0, 255.50000000000014), (322.0, 254.6666666666668), (328.0, 253.83333333333346), (334.0, 253.0000000000001), (338.0, 252.75), (342.0, 252.5), (346.0, 252.25), (350.0, 252.0), (355.08, 251.48), (360.15999999999997, 250.95999999999998), (365.23999999999995, 250.43999999999997), (370.31999999999994, 249.91999999999996), (375.3999999999999, 249.39999999999995), (380.4799999999999, 248.87999999999994), (385.5599999999999, 248.35999999999993), (390.6399999999999, 247.83999999999992), (395.71999999999986, 247.3199999999999), (400.79999999999984, 246.7999999999999), (405.8799999999998, 246.2799999999999), (410.9599999999998, 245.75999999999988), (416.0399999999998, 245.23999999999987), (421.1199999999998, 244.71999999999986), (426.19999999999976, 244.19999999999985), (431.27999999999975, 243.67999999999984), (436.35999999999973, 243.15999999999983), (441.4399999999997, 242.63999999999982), (446.5199999999997, 242.1199999999998), (451.5999999999997, 241.5999999999998), (456.67999999999967, 241.07999999999979), (461.75999999999965, 240.55999999999977), (466.83999999999963, 240.03999999999976), (471.9199999999996, 239.51999999999975), (476.9999999999996, 238.99999999999974), (483.6666666666667, 241.0), (490.33333333333337, 243.0), (497.00000000000006, 245.0), (502.73333333333335, 246.3), (508.4666666666667, 247.60000000000002), (514.2, 248.90000000000003), (519.9333333333334, 250.20000000000005), (525.6666666666667, 251.50000000000006), (531.4000000000001, 252.80000000000007), (537.1333333333334, 254.10000000000008), (542.8666666666668, 255.4000000000001), (548.6000000000001, 256.7000000000001), (554.3333333333335, 258.0000000000001), (560.0666666666668, 259.3000000000001), (565.8000000000002, 260.60000000000014), (571.5333333333335, 261.90000000000015), (577.2666666666669, 263.20000000000016), (583.0000000000002, 264.50000000000017), (588.7333333333336, 265.8000000000002), (594.4666666666669, 267.1000000000002), (600.2000000000003, 268.4000000000002), (605.9333333333336, 269.7000000000002), (611.666666666667, 271.0000000000002), (617.4000000000003, 272.30000000000024), (623.1333333333337, 273.60000000000025), (628.866666666667, 274.90000000000026), (634.6000000000004, 276.2000000000003), (640.3333333333337, 277.5000000000003), (646.0666666666671, 278.8000000000003), (651.8000000000004, 280.1000000000003), (657.5333333333338, 281.4000000000003), (663.2666666666671, 282.70000000000033), (669.0000000000005, 284.00000000000034)]
        for d in range(14,135):
            if (road.main_road2.lane[d].vehicle == 1):
                (x, y) = main_road2[d-14]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.main_road2.lane[d].vehicle == 2):
                (x, y) = main_road2[d-14]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_main_road3_pic2(self):
        main_road3=[(5, 421), (11.5, 415.9), (18.0, 410.79999999999995), (24.5, 405.69999999999993), (31.0, 400.5999999999999), (37.5, 395.4999999999999), (44.0, 390.39999999999986), (50.5, 385.29999999999984), (57.0, 380.1999999999998), (63.5, 375.0999999999998), (70.0, 369.9999999999998), (75.0, 366.5), (80.0, 363.0), (85.6875, 359.375), (91.375, 355.75), (97.0625, 352.125), (102.75, 348.5), (108.4375, 344.875), (114.125, 341.25), (119.8125, 337.625), (125.5, 334.0), (131.1875, 330.375), (136.875, 326.75), (142.5625, 323.125), (148.25, 319.5), (153.9375, 315.875), (159.625, 312.25), (165.3125, 308.625), (171.0, 305.0), (176.0625, 303.0), (181.125, 301.0), (186.1875, 299.0), (191.25, 297.0), (196.3125, 295.0), (201.375, 293.0), (206.4375, 291.0), (211.5, 289.0), (216.5625, 287.0), (221.625, 285.0), (226.6875, 283.0), (231.75, 281.0), (236.8125, 279.0), (241.875, 277.0), (246.9375, 275.0), (252.0, 273.0), (258.5, 271.0), (265.0, 269.0), (270.8333333333333, 268.25), (276.66666666666663, 267.5), (282.49999999999994, 266.75), (288.33333333333326, 266.0), (294.1666666666666, 265.25), (299.9999999999999, 264.5), (305.8333333333332, 263.75), (311.6666666666665, 263.0), (317.49999999999983, 262.25), (323.33333333333314, 261.5), (329.16666666666646, 260.75), (334.9999999999998, 260.0), (339.25, 259.75), (343.5, 259.5), (347.75, 259.25), (352.0, 259.0), (356.96, 258.36), (361.91999999999996, 257.72), (366.87999999999994, 257.08000000000004), (371.8399999999999, 256.44000000000005), (376.7999999999999, 255.80000000000007), (381.7599999999999, 255.16000000000008), (386.71999999999986, 254.5200000000001), (391.67999999999984, 253.8800000000001), (396.6399999999998, 253.24000000000012), (401.5999999999998, 252.60000000000014), (406.5599999999998, 251.96000000000015), (411.51999999999975, 251.32000000000016), (416.47999999999973, 250.68000000000018), (421.4399999999997, 250.0400000000002), (426.3999999999997, 249.4000000000002), (431.3599999999997, 248.76000000000022), (436.31999999999965, 248.12000000000023), (441.27999999999963, 247.48000000000025), (446.2399999999996, 246.84000000000026), (451.1999999999996, 246.20000000000027), (456.15999999999957, 245.5600000000003), (461.11999999999955, 244.9200000000003), (466.07999999999953, 244.2800000000003), (471.0399999999995, 243.64000000000033), (475.9999999999995, 243.00000000000034), (483.0, 245.0), (490.0, 247.0), (497.0, 249.0), (502.76666666666665, 250.36666666666667), (508.5333333333333, 251.73333333333335), (514.3, 253.10000000000002), (520.0666666666666, 254.4666666666667), (525.8333333333333, 255.83333333333337), (531.5999999999999, 257.20000000000005), (537.3666666666666, 258.5666666666667), (543.1333333333332, 259.9333333333334), (548.8999999999999, 261.30000000000007), (554.6666666666665, 262.66666666666674), (560.4333333333332, 264.0333333333334), (566.1999999999998, 265.4000000000001), (571.9666666666665, 266.76666666666677), (577.7333333333331, 268.13333333333344), (583.4999999999998, 269.5000000000001), (589.2666666666664, 270.8666666666668), (595.0333333333331, 272.23333333333346), (600.7999999999997, 273.60000000000014), (606.5666666666664, 274.9666666666668), (612.333333333333, 276.3333333333335), (618.0999999999997, 277.70000000000016), (623.8666666666663, 279.06666666666683), (629.633333333333, 280.4333333333335), (635.3999999999996, 281.8000000000002), (641.1666666666663, 283.16666666666686), (646.9333333333329, 284.53333333333353), (652.6999999999996, 285.9000000000002), (658.4666666666662, 287.2666666666669), (664.2333333333329, 288.63333333333355), (669.9999999999995, 290.0000000000002)]
        for d in range(14,135):
            if (road.main_road3.lane[d].vehicle == 1):
                (x, y) = main_road3[d-14]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.main_road3.lane[d].vehicle == 2):
                (x, y) = main_road3[d-14]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_main_road4_pic2(self):
        main_road4=[(664, 264), (657.7307692307693, 262.65384615384613), (651.4615384615386, 261.30769230769226), (645.1923076923078, 259.9615384615384), (638.9230769230771, 258.6153846153845), (632.6538461538464, 257.26923076923066), (626.3846153846157, 255.92307692307682), (620.115384615385, 254.57692307692298), (613.8461538461543, 253.23076923076914), (607.5769230769235, 251.8846153846153), (601.3076923076928, 250.53846153846146), (595.0384615384621, 249.19230769230762), (588.7692307692314, 247.84615384615378), (582.5000000000007, 246.49999999999994), (576.23076923077, 245.1538461538461), (569.9615384615392, 243.80769230769226), (563.6923076923085, 242.46153846153842), (557.4230769230778, 241.11538461538458), (551.1538461538471, 239.76923076923075), (544.8846153846164, 238.4230769230769), (538.6153846153857, 237.07692307692307), (532.346153846155, 235.73076923076923), (526.0769230769242, 234.3846153846154), (519.8076923076935, 233.03846153846155), (513.5384615384628, 231.6923076923077), (507.269230769232, 230.34615384615387), (501.00000000000125, 229.00000000000003), (491.85714285714283, 227.0), (482.71428571428567, 225.0), (473.5714285714285, 223.0), (464.42857142857133, 221.0), (455.28571428571416, 219.0), (446.142857142857, 217.0), (436.99999999999983, 215.0), (429.6666666666667, 215.0), (422.33333333333337, 215.0), (415.00000000000006, 215.0), (407.66666666666674, 215.0), (400.3333333333334, 215.0), (393.0000000000001, 215.0), (384.8, 216.2), (376.6, 217.39999999999998), (368.40000000000003, 218.59999999999997), (360.20000000000005, 219.79999999999995), (352.00000000000006, 220.99999999999994), (346.6666666666667, 221.33333333333334), (341.33333333333337, 221.66666666666669), (336.00000000000006, 222.00000000000003), (329.4166666666667, 223.16666666666666), (322.83333333333337, 224.33333333333331), (316.25000000000006, 225.49999999999997), (309.66666666666674, 226.66666666666663), (303.0833333333334, 227.8333333333333), (296.5000000000001, 228.99999999999994), (289.9166666666668, 230.1666666666666), (283.3333333333335, 231.33333333333326), (276.75000000000017, 232.49999999999991), (270.16666666666686, 233.66666666666657), (263.58333333333354, 234.83333333333323), (257.0000000000002, 235.9999999999999), (248.0, 238.0), (239.0, 240.0), (233.73333333333332, 242.0), (228.46666666666664, 244.0), (223.19999999999996, 246.0), (217.93333333333328, 248.0), (212.6666666666666, 250.0), (207.39999999999992, 252.0), (202.13333333333324, 254.0), (196.86666666666656, 256.0), (191.59999999999988, 258.0), (186.3333333333332, 260.0), (181.06666666666652, 262.0), (175.79999999999984, 264.0), (170.53333333333316, 266.0), (165.26666666666648, 268.0), (159.9999999999998, 270.0), (154.22222222222223, 273.72222222222223), (148.44444444444446, 277.44444444444446), (142.66666666666669, 281.1666666666667), (136.8888888888889, 284.8888888888889), (131.11111111111114, 288.61111111111114), (125.33333333333337, 292.33333333333337), (119.5555555555556, 296.0555555555556), (113.77777777777783, 299.7777777777778), (108.00000000000006, 303.50000000000006), (102.22222222222229, 307.2222222222223), (96.44444444444451, 310.9444444444445), (90.66666666666674, 314.66666666666674), (84.88888888888897, 318.38888888888897), (79.1111111111112, 322.1111111111112), (73.33333333333343, 325.8333333333334), (67.55555555555566, 329.55555555555566), (61.77777777777788, 333.2777777777779), (56.0000000000001, 337.0000000000001), (52.0, 340.0), (48.0, 343.0), (42.25, 347.25), (36.5, 351.5), (30.75, 355.75), (25.0, 360.0), (19.25, 364.25), (13.5, 368.5), (7.75, 372.75), (2.0, 377.0)]
        for d in range(1627,1732):
            if (road.main_road4.lane[d].vehicle == 1):
                (x, y) = main_road4[d-1627]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.main_road4.lane[d].vehicle == 2):
                (x, y) = main_road4[d-1627]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_main_road5_pic2(self):
        main_road5=[(672, 272), (665.4230769230769, 270.5), (658.8461538461538, 269.0), (652.2692307692307, 267.5), (645.6923076923076, 266.0), (639.1153846153845, 264.5), (632.5384615384614, 263.0), (625.9615384615383, 261.5), (619.3846153846152, 260.0), (612.8076923076922, 258.5), (606.230769230769, 257.0), (599.653846153846, 255.5), (593.0769230769229, 254.0), (586.4999999999998, 252.5), (579.9230769230767, 251.0), (573.3461538461536, 249.5), (566.7692307692305, 248.0), (560.1923076923074, 246.5), (553.6153846153843, 245.0), (547.0384615384612, 243.5), (540.4615384615381, 242.0), (533.884615384615, 240.5), (527.3076923076919, 239.0), (520.7307692307688, 237.5), (514.1538461538457, 236.0), (507.57692307692264, 234.5), (500.99999999999955, 233.0), (491.85714285714283, 231.28571428571428), (482.71428571428567, 229.57142857142856), (473.5714285714285, 227.85714285714283), (464.42857142857133, 226.1428571428571), (455.28571428571416, 224.4285714285714), (446.142857142857, 222.71428571428567), (436.99999999999983, 220.99999999999994), (429.5, 221.0), (422.0, 221.0), (414.5, 221.0), (407.0, 221.0), (399.5, 221.0), (392.0, 221.0), (384.2, 222.2), (376.4, 223.39999999999998), (368.59999999999997, 224.59999999999997), (360.79999999999995, 225.79999999999995), (352.99999999999994, 226.99999999999994), (347.3333333333333, 227.66666666666666), (341.66666666666663, 228.33333333333331), (335.99999999999994, 228.99999999999997), (329.6666666666667, 230.16666666666666), (323.33333333333337, 231.33333333333331), (317.00000000000006, 232.49999999999997), (310.66666666666674, 233.66666666666663), (304.3333333333334, 234.8333333333333), (298.0000000000001, 235.99999999999994), (291.6666666666668, 237.1666666666666), (285.3333333333335, 238.33333333333326), (279.00000000000017, 239.49999999999991), (272.66666666666686, 240.66666666666657), (266.33333333333354, 241.83333333333323), (260.0000000000002, 242.9999999999999), (253.0, 245.0), (246.0, 247.0), (240.46666666666667, 249.06666666666666), (234.93333333333334, 251.13333333333333), (229.4, 253.2), (223.86666666666667, 255.26666666666665), (218.33333333333334, 257.3333333333333), (212.8, 259.4), (207.26666666666668, 261.46666666666664), (201.73333333333335, 263.5333333333333), (196.20000000000002, 265.59999999999997), (190.66666666666669, 267.66666666666663), (185.13333333333335, 269.7333333333333), (179.60000000000002, 271.79999999999995), (174.0666666666667, 273.8666666666666), (168.53333333333336, 275.9333333333333), (163.00000000000003, 277.99999999999994), (157.27777777777777, 281.5), (151.55555555555554, 285.0), (145.83333333333331, 288.5), (140.1111111111111, 292.0), (134.38888888888886, 295.5), (128.66666666666663, 299.0), (122.9444444444444, 302.5), (117.22222222222217, 306.0), (111.49999999999994, 309.5), (105.77777777777771, 313.0), (100.05555555555549, 316.5), (94.33333333333326, 320.0), (88.61111111111103, 323.5), (82.8888888888888, 327.0), (77.16666666666657, 330.5), (71.44444444444434, 334.0), (65.72222222222211, 337.5), (59.99999999999989, 341.0), (56.0, 344.0), (52.0, 347.0), (46.25, 351.625), (40.5, 356.25), (34.75, 360.875), (29.0, 365.5), (23.25, 370.125), (17.5, 374.75), (11.75, 379.375), (6.0, 384.0)]
        for d in range(1627,1732):
            if (road.main_road5.lane[d].vehicle == 1):
                (x, y) = main_road5[d-1627]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.main_road5.lane[d].vehicle == 2):
                (x, y) = main_road5[d-1627]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_main_road6_pic2(self):
        main_road6=[(671, 276), (664.4230769230769, 274.5), (657.8461538461538, 273.0), (651.2692307692307, 271.5), (644.6923076923076, 270.0), (638.1153846153845, 268.5), (631.5384615384614, 267.0), (624.9615384615383, 265.5), (618.3846153846152, 264.0), (611.8076923076922, 262.5), (605.230769230769, 261.0), (598.653846153846, 259.5), (592.0769230769229, 258.0), (585.4999999999998, 256.5), (578.9230769230767, 255.0), (572.3461538461536, 253.5), (565.7692307692305, 252.0), (559.1923076923074, 250.5), (552.6153846153843, 249.0), (546.0384615384612, 247.5), (539.4615384615381, 246.0), (532.884615384615, 244.5), (526.3076923076919, 243.0), (519.7307692307688, 241.5), (513.1538461538457, 240.0), (506.57692307692264, 238.5), (499.99999999999955, 237.0), (490.85714285714283, 235.42857142857142), (481.71428571428567, 233.85714285714283), (472.5714285714285, 232.28571428571425), (463.42857142857133, 230.71428571428567), (454.28571428571416, 229.14285714285708), (445.142857142857, 227.5714285714285), (435.99999999999983, 225.99999999999991), (428.6666666666667, 226.0), (421.33333333333337, 226.0), (414.00000000000006, 226.0), (406.66666666666674, 226.0), (399.3333333333334, 226.0), (392.0000000000001, 226.0), (384.4, 227.0), (376.79999999999995, 228.0), (369.19999999999993, 229.0), (361.5999999999999, 230.0), (353.9999999999999, 231.0), (348.3333333333333, 232.33333333333334), (342.66666666666663, 233.66666666666669), (336.99999999999994, 235.00000000000003), (330.6666666666667, 236.08333333333334), (324.33333333333337, 237.16666666666669), (318.00000000000006, 238.25000000000003), (311.66666666666674, 239.33333333333337), (305.3333333333334, 240.4166666666667), (299.0000000000001, 241.50000000000006), (292.6666666666668, 242.5833333333334), (286.3333333333335, 243.66666666666674), (280.00000000000017, 244.75000000000009), (273.66666666666686, 245.83333333333343), (267.33333333333354, 246.91666666666677), (261.0000000000002, 248.0000000000001), (254.5, 250.0), (248.0, 252.0), (242.46666666666667, 254.06666666666666), (236.93333333333334, 256.1333333333333), (231.4, 258.2), (225.86666666666667, 260.26666666666665), (220.33333333333334, 262.3333333333333), (214.8, 264.4), (209.26666666666668, 266.46666666666664), (203.73333333333335, 268.5333333333333), (198.20000000000002, 270.59999999999997), (192.66666666666669, 272.66666666666663), (187.13333333333335, 274.7333333333333), (181.60000000000002, 276.79999999999995), (176.0666666666667, 278.8666666666666), (170.53333333333336, 280.9333333333333), (165.00000000000003, 282.99999999999994), (159.38888888888889, 286.44444444444446), (153.77777777777777, 289.8888888888889), (148.16666666666666, 293.33333333333337), (142.55555555555554, 296.7777777777778), (136.94444444444443, 300.2222222222223), (131.33333333333331, 303.66666666666674), (125.7222222222222, 307.1111111111112), (120.11111111111109, 310.55555555555566), (114.49999999999997, 314.0000000000001), (108.88888888888886, 317.44444444444457), (103.27777777777774, 320.888888888889), (97.66666666666663, 324.3333333333335), (92.05555555555551, 327.77777777777794), (86.4444444444444, 331.2222222222224), (80.83333333333329, 334.66666666666686), (75.22222222222217, 338.1111111111113), (69.61111111111106, 341.55555555555577), (63.99999999999994, 345.0000000000002), (59.0, 349.0), (54.0, 353.0), (48.375, 357.625), (42.75, 362.25), (37.125, 366.875), (31.5, 371.5), (25.875, 376.125), (20.25, 380.75), (14.625, 385.375), (9.0, 390.0)]
        for d in range(1627,1732):
            if (road.main_road6.lane[d].vehicle == 1):
                (x, y) = main_road6[d-1627]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.main_road6.lane[d].vehicle == 2):
                (x, y) = main_road6[d-1627]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_r1_pic2(self):
        r1=[(1, 301), (4.727272727272727, 304.27272727272725), (8.454545454545453, 307.5454545454545), (12.18181818181818, 310.81818181818176), (15.909090909090907, 314.090909090909), (19.636363636363633, 317.36363636363626), (23.36363636363636, 320.6363636363635), (27.090909090909086, 323.90909090909076), (30.818181818181813, 327.181818181818), (34.54545454545454, 330.45454545454527), (38.272727272727266, 333.7272727272725), (41.99999999999999, 336.9999999999998), (46.333333333333336, 342.0), (50.66666666666667, 347.0), (55.00000000000001, 352.0), (56.75, 354.25), (58.5, 356.5), (60.25, 358.75), (62.0, 361.0), (65.33333333333333, 364.6666666666667), (68.66666666666666, 368.33333333333337), (71.99999999999999, 372.00000000000006), (77.41666666666667, 375.5833333333333), (82.83333333333334, 379.16666666666663), (88.25000000000001, 382.74999999999994), (93.66666666666669, 386.33333333333326), (99.08333333333336, 389.9166666666666), (104.50000000000003, 393.4999999999999), (109.9166666666667, 397.0833333333332), (115.33333333333337, 400.6666666666665), (120.75000000000004, 404.24999999999983), (126.16666666666671, 407.83333333333314), (131.58333333333337, 411.41666666666646), (137.00000000000003, 414.9999999999998)]
        for d in range(34):
            if (road.r1.lane[d].vehicle == 1):
                (x, y) = r1[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r1.lane[d].vehicle == 2):
                (x, y) = r1[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
    
    def draw_r2_pic2(self):
        r2=[(140, 410), (134.45454545454547, 406.45454545454544), (128.90909090909093, 402.9090909090909), (123.36363636363639, 399.3636363636363), (117.81818181818184, 395.81818181818176), (112.2727272727273, 392.2727272727272), (106.72727272727275, 388.72727272727263), (101.1818181818182, 385.1818181818181), (95.63636363636365, 381.6363636363635), (90.09090909090911, 378.09090909090895), (84.54545454545456, 374.5454545454544), (79.00000000000001, 370.99999999999983), (75.33333333333333, 367.0), (71.66666666666666, 363.0), (67.99999999999999, 359.0), (66.0, 357.25), (64.0, 355.5), (62.0, 353.75), (60.0, 352.0), (57.333333333333336, 348.3333333333333), (54.66666666666667, 344.66666666666663), (52.00000000000001, 340.99999999999994), (47.916666666666664, 337.4166666666667), (43.83333333333333, 333.83333333333337), (39.74999999999999, 330.25000000000006), (35.66666666666666, 326.66666666666674), (31.583333333333325, 323.0833333333334), (27.499999999999993, 319.5000000000001), (23.41666666666666, 315.9166666666668), (19.33333333333333, 312.3333333333335), (15.249999999999996, 308.75000000000017), (11.166666666666664, 305.16666666666686), (7.083333333333331, 301.58333333333354), (2.9999999999999982, 298.0000000000002)]
        for d in range(34):
            if (road.r2.lane[d].vehicle == 1):
                (x, y) = r2[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r2.lane[d].vehicle == 2):
                (x, y) = r2[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
              
    def draw_r3_pic2(self):
        r3=[(241, 371), (235.5, 365.3333333333333), (230.0, 359.66666666666663), (224.5, 353.99999999999994), (219.0, 348.33333333333326), (213.5, 342.6666666666666), (208.0, 336.9999999999999), (202.5, 331.3333333333332), (197.0, 325.6666666666665), (191.5, 319.99999999999983), (186.0, 314.33333333333314), (180.5, 308.66666666666646), (175.0, 302.9999999999998)]
        for d in range(13):
            if (road.r3.lane[d].vehicle == 1):
                (x, y) = r3[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r3.lane[d].vehicle == 2):
                (x, y) = r3[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()      
            
    def draw_r4_pic2(self):
        r4=[(182, 197), (187.0909090909091, 200.63636363636363), (192.1818181818182, 204.27272727272725), (197.27272727272728, 207.90909090909088), (202.36363636363637, 211.5454545454545), (207.45454545454547, 215.18181818181813), (212.54545454545456, 218.81818181818176), (217.63636363636365, 222.45454545454538), (222.72727272727275, 226.090909090909), (227.81818181818184, 229.72727272727263), (232.90909090909093, 233.36363636363626), (238.00000000000003, 236.9999999999999), (241.33333333333334, 242.66666666666666), (244.66666666666669, 248.33333333333331), (248.00000000000003, 253.99999999999997), (249.0, 255.25), (250.0, 256.5), (251.0, 257.75), (252.0, 259.0), (254.66666666666666, 263.6666666666667), (257.3333333333333, 268.33333333333337), (260.0, 273.00000000000006), (263.0833333333333, 277.4166666666667), (266.16666666666663, 281.83333333333337), (269.24999999999994, 286.25000000000006), (272.33333333333326, 290.66666666666674), (275.4166666666666, 295.0833333333334), (278.4999999999999, 299.5000000000001), (281.5833333333332, 303.9166666666668), (284.6666666666665, 308.3333333333335), (287.74999999999983, 312.75000000000017), (290.83333333333314, 317.16666666666686), (293.91666666666646, 321.58333333333354), (296.9999999999998, 326.0000000000002)]
        for d in range(34):
            if (road.r4.lane[d].vehicle == 1):
                (x, y) = r4[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r4.lane[d].vehicle == 2):
                (x, y) = r4[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_r5_pic2(self):
        r5=[(261, 261), (260.25, 259.25), (259.5, 257.5), (258.75, 255.75), (258.0, 254.0), (255.0, 248.66666666666666), (252.0, 243.33333333333331), (249.0, 237.99999999999997), (243.66666666666666, 234.41666666666666), (238.33333333333331, 230.83333333333331), (232.99999999999997, 227.24999999999997), (227.66666666666663, 223.66666666666663), (222.3333333333333, 220.0833333333333), (216.99999999999994, 216.49999999999994), (211.6666666666666, 212.9166666666666), (206.33333333333326, 209.33333333333326), (200.99999999999991, 205.74999999999991), (195.66666666666657, 202.16666666666657), (190.33333333333323, 198.58333333333323), (184.9999999999999, 194.9999999999999)]
        for d in range(20):
            if (road.r5.lane[d].vehicle == 1):
                (x, y) = r5[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r5.lane[d].vehicle == 2):
                (x, y) = r5[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()             
                
    def draw_r6_pic2(self):
        r6=[(332, 156), (332.3636363636364, 161.63636363636363), (332.72727272727275, 167.27272727272725), (333.0909090909091, 172.90909090909088), (333.4545454545455, 178.5454545454545), (333.81818181818187, 184.18181818181813), (334.18181818181824, 189.81818181818176), (334.5454545454546, 195.45454545454538), (334.909090909091, 201.090909090909), (335.27272727272737, 206.72727272727263), (335.63636363636374, 212.36363636363626), (336.0000000000001, 217.9999999999999), (336.3333333333333, 224.33333333333334), (336.66666666666663, 230.66666666666669), (336.99999999999994, 237.00000000000003), (337.25, 239.0), (337.5, 241.0), (337.75, 243.0), (338.0, 245.0), (338.6666666666667, 250.33333333333334), (339.33333333333337, 255.66666666666669), (340.00000000000006, 261.0), (340.3333333333333, 265.5), (340.66666666666663, 270.0), (340.99999999999994, 274.5), (341.33333333333326, 279.0), (341.6666666666666, 283.5), (341.9999999999999, 288.0), (342.3333333333332, 292.5), (342.6666666666665, 297.0), (342.99999999999983, 301.5), (343.33333333333314, 306.0), (343.66666666666646, 310.5), (343.9999999999998, 315.0)]
        for d in range(34):
            if (road.r6.lane[d].vehicle == 1):
                (x, y) = r6[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r6.lane[d].vehicle == 2):
                (x, y) = r6[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
       
    def draw_r7_pic2(self):
        r7=[(336, 149), (336.3636363636364, 155.1818181818182), (336.72727272727275, 161.36363636363637), (337.0909090909091, 167.54545454545456), (337.4545454545455, 173.72727272727275), (337.81818181818187, 179.90909090909093), (338.18181818181824, 186.09090909090912), (338.5454545454546, 192.2727272727273), (338.909090909091, 198.4545454545455), (339.27272727272737, 204.63636363636368), (339.63636363636374, 210.81818181818187), (340.0000000000001, 217.00000000000006), (341.0, 223.0), (342.0, 229.0), (343.0, 235.0), (342.8, 237.6), (342.6, 240.2), (342.40000000000003, 242.79999999999998), (342.20000000000005, 245.39999999999998), (342.00000000000006, 247.99999999999997)]
        for d in range(20):
            if (road.r7.lane[d].vehicle == 1):
                (x, y) = r7[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r7.lane[d].vehicle == 2):
                (x, y) = r7[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()         
                
    def draw_r8_pic2(self):
        r8=[(349, 316), (348.90909090909093, 311.1818181818182), (348.81818181818187, 306.3636363636364), (348.7272727272728, 301.54545454545456), (348.63636363636374, 296.72727272727275), (348.5454545454547, 291.90909090909093), (348.4545454545456, 287.0909090909091), (348.36363636363654, 282.2727272727273), (348.2727272727275, 277.4545454545455), (348.1818181818184, 272.6363636363637), (348.09090909090935, 267.81818181818187), (348.0000000000003, 263.00000000000006), (347.3333333333333, 257.6666666666667), (346.66666666666663, 252.33333333333334), (345.99999999999994, 247.0), (347.0, 244.0), (348.0, 241.0), (349.0, 238.0), (350.0, 235.0), (349.0, 230.0), (348.0, 225.0), (347.0, 220.0), (346.4166666666667, 214.16666666666666), (345.83333333333337, 208.33333333333331), (345.25000000000006, 202.49999999999997), (344.66666666666674, 196.66666666666663), (344.0833333333334, 190.8333333333333), (343.5000000000001, 184.99999999999994), (342.9166666666668, 179.1666666666666), (342.3333333333335, 173.33333333333326), (341.75000000000017, 167.49999999999991), (341.16666666666686, 161.66666666666657), (340.58333333333354, 155.83333333333323), (340.0000000000002, 149.9999999999999)]
        for d in range(34):
            if (road.r8.lane[d].vehicle == 1):
                (x, y) = r8[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r8.lane[d].vehicle == 2):
                (x, y) = r8[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                              
    def draw_r9_pic2(self):
        r9=[(356, 318), (355.75, 313.1666666666667), (355.5, 308.33333333333337), (355.25, 303.50000000000006), (355.0, 298.66666666666674), (354.75, 293.8333333333334), (354.5, 289.0000000000001), (354.25, 284.1666666666668), (354.0, 279.3333333333335), (353.75, 274.50000000000017), (353.5, 269.66666666666686), (353.25, 264.83333333333354), (353.0, 260.0000000000002)]
        for d in range(13):
            if (road.r9.lane[d].vehicle == 1):
                (x, y) = r9[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r9.lane[d].vehicle == 2):
                (x, y) = r9[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                              
    def draw_r10_pic2(self):
        r10=[(384, 218), (381.0833333333333, 213.25), (378.16666666666663, 208.5), (375.24999999999994, 203.75), (372.33333333333326, 199.0), (369.4166666666666, 194.25), (366.4999999999999, 189.5), (363.5833333333332, 184.75), (360.6666666666665, 180.0), (357.74999999999983, 175.25), (354.83333333333314, 170.5), (351.91666666666646, 165.75), (348.9999999999998, 161.0)]
        for d in range(13):
            if (road.r10.lane[d].vehicle == 1):
                (x, y) = r10[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r10.lane[d].vehicle == 2):
                (x, y) = r10[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
    
    def draw_r11_pic2(self):
        r11=[(437, 217), (436.1666666666667, 211.91666666666666), (435.33333333333337, 206.83333333333331), (434.50000000000006, 201.74999999999997), (433.66666666666674, 196.66666666666663), (432.8333333333334, 191.5833333333333), (432.0000000000001, 186.49999999999994), (431.1666666666668, 181.4166666666666), (430.3333333333335, 176.33333333333326), (429.50000000000017, 171.24999999999991), (428.66666666666686, 166.16666666666657), (427.83333333333354, 161.08333333333323), (427.0000000000002, 155.9999999999999)]
        for d in range(13):
            if (road.r11.lane[d].vehicle == 1):
                (x, y) = r11[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r11.lane[d].vehicle == 2):
                (x, y) = r11[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
               
    def draw_r12_pic2(self):
        r12=[(557, 146), (550.0833333333334, 152.41666666666666), (543.1666666666667, 158.83333333333331), (536.2500000000001, 165.24999999999997), (529.3333333333335, 171.66666666666663), (522.4166666666669, 178.0833333333333), (515.5000000000002, 184.49999999999994), (508.58333333333354, 190.9166666666666), (501.66666666666686, 197.33333333333326), (494.75000000000017, 203.74999999999991), (487.8333333333335, 210.16666666666657), (480.9166666666668, 216.58333333333323), (474.0000000000001, 222.9999999999999)]
        for d in range(13):
            if (road.r12.lane[d].vehicle == 1):
                (x, y) = r12[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r12.lane[d].vehicle == 2):
                (x, y) = r12[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
    def draw_r13_pic2(self):
        r13=[(563, 149), (555.8181818181819, 155.36363636363637), (548.6363636363637, 161.72727272727275), (541.4545454545456, 168.09090909090912), (534.2727272727275, 174.4545454545455), (527.0909090909093, 180.81818181818187), (519.9090909090912, 187.18181818181824), (512.7272727272731, 193.54545454545462), (505.5454545454549, 199.909090909091), (498.3636363636367, 206.27272727272737), (491.1818181818185, 212.63636363636374), (484.00000000000034, 219.0000000000001), (484.0, 224.0), (484.0, 229.0), (484.0, 234.0), (484.0, 239.0)]
        for d in range(16):
            if (road.r13.lane[d].vehicle == 1):
                (x, y) = r13[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r13.lane[d].vehicle == 2):
                (x, y) = r13[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
     
    def draw_r14_pic2(self):
        r14=[(499, 243), (496.6666666666667, 237.66666666666666), (494.33333333333337, 232.33333333333331), (492.00000000000006, 226.99999999999997), (498.0833333333333, 220.5), (504.16666666666663, 214.0), (510.24999999999994, 207.5), (516.3333333333333, 201.0), (522.4166666666666, 194.5), (528.5, 188.0), (534.5833333333334, 181.5), (540.6666666666667, 175.0), (546.7500000000001, 168.5), (552.8333333333335, 162.0), (558.9166666666669, 155.5), (565.0000000000002, 149.0)]
        for d in range(16):
            if (road.r14.lane[d].vehicle == 1):
                (x, y) = r14[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r14.lane[d].vehicle == 2):
                (x, y) = r14[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()    
           
    def draw_r15_pic2(self):
        r15=[(502, 229), (507.3333333333333, 222.66666666666666), (512.6666666666666, 216.33333333333331), (518.0, 209.99999999999997), (523.3333333333334, 203.66666666666663), (528.6666666666667, 197.3333333333333), (534.0000000000001, 190.99999999999994), (539.3333333333335, 184.6666666666666), (544.6666666666669, 178.33333333333326), (550.0000000000002, 171.99999999999991), (555.3333333333336, 165.66666666666657), (560.666666666667, 159.33333333333323), (566.0000000000003, 152.9999999999999)]
        for d in range(13):
            if (road.r15.lane[d].vehicle == 1):
                (x, y) = r15[d]
                pygame.draw.rect(self.screen, (0, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
            elif(road.r15.lane[d].vehicle == 2):
                (x, y) = r15[d]
                pygame.draw.rect(self.screen, (255, 0, 0), pygame.Rect(x, y, 2, 2))
                pygame.display.update()
                
                
                
                
                
                
                
                
                
                